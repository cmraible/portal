datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  stripe_customer_id    String? @unique
  is_staff              Boolean @default(false)
  is_superuser          Boolean @default(false)
  lifecycle_stage       String @default("Lead")
  accounts              Account[]
  sessions              Session[]
  subscriptions         Subscription[]
  billing_line_1        String?
  billing_line_2        String?
  billing_country       String?
  billing_city          String?
  billing_state         String?
  billing_postal_code   String?
  payment_method_id     String?
  created               DateTime @default(now())
  updated               DateTime @updatedAt
  projects_created      Project[]
  projects              ProjectContact[]
  tasks_assigned        Task[] @relation("tasks_assigned")
  tasks_created         Task[] @relation("tasks_created")
  timers                Timer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                String   @id
  active            Boolean?
  name              String?
  description       String?
  image             String?
  metadata          Json?
  prices            Price[]
}

model Price {
  id                  String  @id
  product_id          String
  product             Product @relation(fields: [product_id], references: [id])
  active              Boolean
  description         String?
  unit_amount         BigInt
  currency            String
  type                String
  interval            String
  interval_count      Int?
  trial_period_days   Int?
  metadata            Json
}

model Subscription {
  id                      String    @id
  user_id                 String
  user                    User @relation(fields: [user_id], references: [id])
  status                  String
  metadata                Json
  price_id                String
  quantity                Int
  cancel_at_period_end    Boolean
  created                 DateTime
  current_period_start    DateTime
  current_period_end      DateTime
  ended_at                DateTime?
  cancel_at               DateTime?
  canceled_at             DateTime?
  trial_start             DateTime?
  trial_end               DateTime?
}

model Project {
  id              String @id @default(cuid())
  name            String
  description     String?
  domain          String?
  status          String @default("New")
  type            String?
  rate            Decimal? @db.Money
  price_id        Decimal? @db.Money
  monthly_hours   Int?
  created         DateTime @default(now())
  updated         DateTime @updatedAt
  creator_id      String
  creator         User @relation(fields: [creator_id], references: [id])
  contacts        ProjectContact[]
  tasks           Task[]
  timers          Timer[]
}

model ProjectContact {
  contact         User @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  contact_id      String
  project         Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id      String
  role            String?
  created         DateTime @default(now())
  updated         DateTime @updatedAt

  @@id([contact_id, project_id])
}

model Task {
  id              String @id @default(cuid())
  project         Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id      String
  description     String
  assignee        User? @relation(name: "tasks_assigned", fields: [assignee_id], references: [id], onDelete: Restrict)
  assignee_id     String?
  due_date        DateTime?
  creator         User @relation(name: "tasks_created", fields: [creator_id], references: [id], onDelete: Restrict)
  creator_id      String
  created         DateTime @default(now())
  updated         DateTime @updatedAt
  completed       DateTime?
  timers          Timer[]
}

model Timer {
  id              String @id @default(cuid())
  project         Project @relation(fields: [project_id], references: [id], onDelete: Restrict)
  project_id      String 
  task            Task @relation(fields: [task_id], references: [id], onDelete: Restrict)
  task_id         String
  started         DateTime
  ended           DateTime?
  user            User @relation(fields: [user_id], references: [id], onDelete: Restrict)
  user_id         String
  created         DateTime @default(now())
  updated         DateTime @updatedAt
}
